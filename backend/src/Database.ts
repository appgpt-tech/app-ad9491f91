//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { postsEntity } from './db/posts.entity';
import { messagesEntity } from './db/messages.entity';
import { friendsEntity } from './db/friends.entity';
import { photosEntity } from './db/photos.entity';
import { videosEntity } from './db/videos.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      postsEntity,
      messagesEntity,
      friendsEntity,
      photosEntity,
      videosEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        {
          name: 'name 1',
          lastname: 'lastname 1',
          email: 'email 1',
          password: 'password 1',
          id: 84,
        },
        {
          name: 'name 2',
          lastname: 'lastname 2',
          email: 'email 2',
          password: 'password 2',
          id: 51,
        },
        {
          name: 'name 3',
          lastname: 'lastname 3',
          email: 'email 3',
          password: 'password 3',
          id: 79,
        },
        {
          name: 'name 4',
          lastname: 'lastname 4',
          email: 'email 4',
          password: 'password 4',
          id: 97,
        },
        {
          name: 'name 5',
          lastname: 'lastname 5',
          email: 'email 5',
          password: 'password 5',
          id: 80,
        },
      ],
      posts: [
        {
          text: 'text 1',
          audio: 'audio 1',
          video: 'video 1',
          link: 'link 1',
          photo: 'photo 1',
          id: 9,
        },
        {
          text: 'text 2',
          audio: 'audio 2',
          video: 'video 2',
          link: 'link 2',
          photo: 'photo 2',
          id: 39,
        },
        {
          text: 'text 3',
          audio: 'audio 3',
          video: 'video 3',
          link: 'link 3',
          photo: 'photo 3',
          id: 83,
        },
        {
          text: 'text 4',
          audio: 'audio 4',
          video: 'video 4',
          link: 'link 4',
          photo: 'photo 4',
          id: 63,
        },
        {
          text: 'text 5',
          audio: 'audio 5',
          video: 'video 5',
          link: 'link 5',
          photo: 'photo 5',
          id: 63,
        },
      ],
      messages: [
        { text: 'text 1', image: 'image 1', video: 'video 1', id: 100 },
        { text: 'text 2', image: 'image 2', video: 'video 2', id: 85 },
        { text: 'text 3', image: 'image 3', video: 'video 3', id: 77 },
        { text: 'text 4', image: 'image 4', video: 'video 4', id: 86 },
        { text: 'text 5', image: 'image 5', video: 'video 5', id: 92 },
      ],
      friends: [
        { userId1: 1, userId2: 1, id: 35 },
        { userId1: 2, userId2: 2, id: 35 },
        { userId1: 3, userId2: 3, id: 78 },
        { userId1: 4, userId2: 4, id: 62 },
        { userId1: 5, userId2: 5, id: 69 },
      ],
      photos: [
        { postId: 1, id: 92 },
        { postId: 2, id: 71 },
        { postId: 3, id: 37 },
        { postId: 4, id: 43 },
        { postId: 5, id: 61 },
      ],
      videos: [
        { postId: 1, chatId: 1, id: 52 },
        { postId: 2, chatId: 2, id: 85 },
        { postId: 3, chatId: 3, id: 14 },
        { postId: 4, chatId: 4, id: 87 },
        { postId: 5, chatId: 5, id: 0 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('postsEntity', data.posts);
      await this.SeedResource('messagesEntity', data.messages);
      await this.SeedResource('friendsEntity', data.friends);
      await this.SeedResource('photosEntity', data.photos);
      await this.SeedResource('videosEntity', data.videos);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
